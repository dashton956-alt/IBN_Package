@version: 4.3
@include "scl.conf"

# ==========================================
# OPTIONS - Global Configuration
# ==========================================
options {
    chain_hostnames(off);
    flush_lines(100);
    use_dns(no);
    use_fqdn(no);
    keep_hostname(yes);
    log_fifo_size(10000);
    log_msg_size(65536);
    time_reopen(10);
    time_reap(360);
    mark_freq(0);
    stats_freq(3600);
    threaded(yes);
};

# ==========================================
# SOURCES - Log Input Endpoints
# ==========================================

# Network syslog - UDP (standard syslog)
source s_network_udp {
    network(
        transport("udp")
        port(514)
        so_rcvbuf(2097152)
        log_iw_size(10000)
        flags(no-parse)
    );
};

# Network syslog - TCP (reliable syslog)
source s_network_tcp {
    network(
        transport("tcp")
        port(514)
        so_rcvbuf(2097152)
        log_iw_size(10000)
        max-connections(1000)
        flags(no-parse)
    );
};

# RFC 5424 syslog over TCP
source s_rfc5424 {
    syslog(
        transport("tcp")
        port(601)
        flags(syslog-protocol)
    );
};

# Internal syslog-ng messages
source s_internal {
    internal();
};

# ==========================================
# PARSERS - Log Processing
# ==========================================

# Parse syslog messages
parser p_syslog {
    syslog-parser(
        flags(assume-utf8, guess-timezone)
    );
};

# Extract additional fields
parser p_extract_fields {
    csv-parser(
        columns("PRIORITY", "FACILITY", "LEVEL")
        delimiters(" ")
        flags(greedy, strip-whitespace)
    );
};

# Parse JSON if present
parser p_json {
    json-parser(
        prefix(".json.")
    );
};

# ==========================================
# FILTERS - Log Classification
# ==========================================

# Filter by severity
filter f_error {
    level(err, crit, alert, emerg);
};

filter f_warning {
    level(warning);
};

filter f_info {
    level(info, notice);
};

filter f_debug {
    level(debug);
};

# Filter by facility
filter f_auth {
    facility(auth, authpriv);
};

filter f_kern {
    facility(kern);
};

filter f_mail {
    facility(mail);
};

# Filter by content patterns
filter f_network_device {
    match("^%(router|switch|firewall|%" value("PROGRAM"));
};

filter f_security_event {
    match("security|unauthorized|denied|failed|breach" value("MESSAGE") flags(ignore-case));
};

filter f_config_change {
    match("config|configuration|changed|modified|updated" value("MESSAGE") flags(ignore-case));
};

filter f_device_down {
    match("down|unreachable|timeout|offline" value("MESSAGE") flags(ignore-case));
};

# ==========================================
# REWRITE - Message Enrichment
# ==========================================

rewrite r_add_metadata {
    set("${YEAR}-${MONTH}-${DAY}T${HOUR}:${MIN}:${SEC}.${MSEC}${TZ}" value("ISODATE"));
    set("${HOST}" value("SOURCE_HOST"));
    set("${FACILITY}" value("FACILITY_NAME"));
    set("${LEVEL}" value("SEVERITY_NAME"));
};

rewrite r_classify_event {
    set("unknown" value("EVENT_TYPE"));
    
    # Classify based on content
    set("security" value("EVENT_TYPE") condition(filter(f_security_event)));
    set("config_change" value("EVENT_TYPE") condition(filter(f_config_change)));
    set("device_status" value("EVENT_TYPE") condition(filter(f_device_down)));
    set("network_event" value("EVENT_TYPE") condition(filter(f_network_device)));
};

# ==========================================
# TEMPLATES - Message Formatting
# ==========================================

# JSON template for Kafka
template t_json_kafka {
    template("$(format-json \
        timestamp=$ISODATE \
        host=$HOST \
        source_host=$SOURCE_HOST \
        program=$PROGRAM \
        pid=$PID \
        facility=$FACILITY_NAME \
        severity=$SEVERITY_NAME \
        message=$MESSAGE \
        event_type=$EVENT_TYPE \
        --scope rfc5424 \
        --scope nv-pairs \
        --exclude DATE \
        --exclude R_* \
        --exclude S_* \
        --exclude HOST_FROM \
        --exclude LEGACY_MSGHDR \
        --key ISODATE)\n");
};

# Human-readable template for file logging
template t_file_format {
    template("${ISODATE} ${HOST} ${PROGRAM}[${PID}]: ${MESSAGE}\n");
};

# ==========================================
# DESTINATIONS - Kafka Topics
# ==========================================

# Kafka destination - Raw logs
destination d_kafka_raw {
    kafka(
        bootstrap_servers("kafka:9092")
        topic("syslog-raw")
        template("$(template t_json_kafka)")
        properties(
            "compression.type" => "snappy"
            "queue.buffering.max.messages" => "100000"
            "queue.buffering.max.kbytes" => "1048576"
        )
        persist-name("kafka-raw")
    );
};

# Kafka destination - Error logs
destination d_kafka_error {
    kafka(
        bootstrap_servers("kafka:9092")
        topic("syslog-error")
        template("$(template t_json_kafka)")
        properties(
            "compression.type" => "snappy"
        )
        persist-name("kafka-error")
    );
};

# Kafka destination - Warning logs
destination d_kafka_warning {
    kafka(
        bootstrap_servers("kafka:9092")
        topic("syslog-warning")
        template("$(template t_json_kafka)")
        properties(
            "compression.type" => "snappy"
        )
        persist-name("kafka-warning")
    );
};

# Kafka destination - Info logs
destination d_kafka_info {
    kafka(
        bootstrap_servers("kafka:9092")
        topic("syslog-info")
        template("$(template t_json_kafka)")
        properties(
            "compression.type" => "snappy"
        )
        persist-name("kafka-info")
    );
};

# Kafka destination - Device events
destination d_kafka_device_events {
    kafka(
        bootstrap_servers("kafka:9092")
        topic("device-events")
        template("$(template t_json_kafka)")
        properties(
            "compression.type" => "snappy"
        )
        persist-name("kafka-device")
    );
};

# Kafka destination - Network events
destination d_kafka_network_events {
    kafka(
        bootstrap_servers("kafka:9092")
        topic("network-events")
        template("$(template t_json_kafka)")
        properties(
            "compression.type" => "snappy"
        )
        persist-name("kafka-network")
    );
};

# Kafka destination - Security events
destination d_kafka_security_events {
    kafka(
        bootstrap_servers("kafka:9092")
        topic("security-events")
        template("$(template t_json_kafka)")
        properties(
            "compression.type" => "snappy"
        )
        persist-name("kafka-security")
    );
};

# ==========================================
# FILE DESTINATIONS - Backup/Debug
# ==========================================

destination d_file_all {
    file(
        "/var/log/syslog-ng/all.log"
        template("$(template t_file_format)")
        create_dirs(yes)
    );
};

destination d_file_error {
    file(
        "/var/log/syslog-ng/error.log"
        template("$(template t_file_format)")
        create_dirs(yes)
    );
};

# ==========================================
# LOG PATHS - Route Messages
# ==========================================

# Route all messages to raw Kafka topic
log {
    source(s_network_udp);
    source(s_network_tcp);
    source(s_rfc5424);
    
    parser(p_syslog);
    parser(p_json);
    
    rewrite(r_add_metadata);
    rewrite(r_classify_event);
    
    destination(d_kafka_raw);
    destination(d_file_all);
    
    flags(flow-control, final);
};

# Route error messages
log {
    source(s_network_udp);
    source(s_network_tcp);
    source(s_rfc5424);
    
    parser(p_syslog);
    filter(f_error);
    
    rewrite(r_add_metadata);
    rewrite(r_classify_event);
    
    destination(d_kafka_error);
    destination(d_file_error);
    
    flags(flow-control);
};

# Route warning messages
log {
    source(s_network_udp);
    source(s_network_tcp);
    source(s_rfc5424);
    
    parser(p_syslog);
    filter(f_warning);
    
    rewrite(r_add_metadata);
    rewrite(r_classify_event);
    
    destination(d_kafka_warning);
    
    flags(flow-control);
};

# Route info messages
log {
    source(s_network_udp);
    source(s_network_tcp);
    source(s_rfc5424);
    
    parser(p_syslog);
    filter(f_info);
    
    rewrite(r_add_metadata);
    rewrite(r_classify_event);
    
    destination(d_kafka_info);
    
    flags(flow-control);
};

# Route security events
log {
    source(s_network_udp);
    source(s_network_tcp);
    source(s_rfc5424);
    
    parser(p_syslog);
    filter(f_security_event);
    
    rewrite(r_add_metadata);
    rewrite(r_classify_event);
    
    destination(d_kafka_security_events);
    
    flags(flow-control);
};

# Route network events
log {
    source(s_network_udp);
    source(s_network_tcp);
    source(s_rfc5424);
    
    parser(p_syslog);
    filter(f_network_device);
    
    rewrite(r_add_metadata);
    rewrite(r_classify_event);
    
    destination(d_kafka_network_events);
    
    flags(flow-control);
};

# Route device events (config changes, status)
log {
    source(s_network_udp);
    source(s_network_tcp);
    source(s_rfc5424);
    
    parser(p_syslog);
    filter(f_config_change);
    
    rewrite(r_add_metadata);
    rewrite(r_classify_event);
    
    destination(d_kafka_device_events);
    
    flags(flow-control);
};

# Internal messages
log {
    source(s_internal);
    destination(d_file_all);
};
