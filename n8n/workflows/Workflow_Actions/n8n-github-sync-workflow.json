{
  "name": "GitHub â†’ n8n Workflow Sync",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "github-workflow-sync",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 300],
      "webhookId": "github-workflow-sync",
      "notes": "Receives webhook from GitHub Actions"
    },
    {
      "parameters": {
        "jsCode": "// Parse and validate incoming webhook data\nconst body = $input.item.json.body;\n\n// Validate required fields\nconst required = ['repository', 'ref', 'sha', 'n8n_api_key', 'github_token'];\nconst missing = required.filter(field => !body[field]);\n\nif (missing.length > 0) {\n  throw new Error(`Missing required fields: ${missing.join(', ')}`);\n}\n\n// Extract and structure data\nconst payload = {\n  repository: body.repository,\n  owner: body.repository.split('/')[0],\n  repo: body.repository.split('/')[1],\n  ref: body.ref,\n  branch: body.ref.replace('refs/heads/', ''),\n  sha: body.sha,\n  n8n_api_key: body.n8n_api_key,\n  github_token: body.github_token,\n  workflow_path: body.workflow_path || 'workflows',\n  n8n_base_url: body.n8n_base_url || 'http://localhost:5678',\n  dry_run: body.dry_run || false,\n  \n  // Metadata\n  triggered_at: new Date().toISOString(),\n  workflow_run_id: $workflow.id,\n  execution_id: $execution.id\n};\n\n// Log the request\nconsole.log('GitHub Sync triggered:', {\n  repository: payload.repository,\n  branch: payload.branch,\n  sha: payload.sha\n});\n\nreturn { json: payload };"
      },
      "id": "parse-webhook",
      "name": "Parse Webhook Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300],
      "notes": "Validates and structures incoming data"
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "GET",
        "url": "=https://api.github.com/repos/{{ $json.owner }}/{{ $json.repo }}/git/trees/{{ $json.sha }}?recursive=1",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.github_token }}"
            },
            {
              "name": "Accept",
              "value": "application/vnd.github.v3+json"
            },
            {
              "name": "User-Agent",
              "value": "n8n-workflow-sync"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "get-repo-tree",
      "name": "Get Repository Tree",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 300],
      "notes": "Fetches complete repository tree from GitHub"
    },
    {
      "parameters": {
        "jsCode": "// Filter for .json workflow files\nconst tree = $input.item.json.tree || [];\nconst workflowPath = $input.item.json.workflow_path;\n\n// Filter for JSON files in workflow directory\nconst workflowFiles = tree.filter(item => {\n  return item.type === 'blob' && \n         item.path.endsWith('.json') && \n         item.path.startsWith(workflowPath) &&\n         !item.path.includes('node_modules') &&\n         !item.path.includes('.git');\n});\n\nif (workflowFiles.length === 0) {\n  console.log('No workflow files found');\n  return [];\n}\n\nconsole.log(`Found ${workflowFiles.length} workflow file(s)`);\n\n// Structure workflow metadata\nconst workflows = workflowFiles.map(file => {\n  // Extract folder structure from path\n  const pathParts = file.path.split('/');\n  const fileName = pathParts[pathParts.length - 1];\n  const folderPath = pathParts.slice(0, -1).join('/');\n  \n  // Generate tags from folder structure\n  const tags = pathParts\n    .filter(part => part !== workflowPath && part !== fileName)\n    .map(part => part.replace(/[_-]/g, ' '));\n  \n  return {\n    // File info\n    path: file.path,\n    fileName: fileName,\n    folderPath: folderPath,\n    sha: file.sha,\n    size: file.size,\n    url: file.url,\n    \n    // n8n metadata\n    workflowName: fileName.replace('.json', ''),\n    tags: tags,\n    \n    // GitHub metadata\n    repository: $input.item.json.repository,\n    branch: $input.item.json.branch,\n    commit_sha: $input.item.json.sha,\n    \n    // Auth\n    github_token: $input.item.json.github_token,\n    n8n_api_key: $input.item.json.n8n_api_key,\n    n8n_base_url: $input.item.json.n8n_base_url,\n    dry_run: $input.item.json.dry_run\n  };\n});\n\nreturn workflows.map(wf => ({ json: wf }));"
      },
      "id": "filter-workflows",
      "name": "Filter Workflow Files",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300],
      "notes": "Filters for .json files and extracts metadata"
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "GET",
        "url": "={{ $json.url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.github_token }}"
            },
            {
              "name": "Accept",
              "value": "application/vnd.github.v3.raw"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "fetch-workflow-content",
      "name": "Fetch Workflow Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 300],
      "notes": "Downloads actual workflow JSON content"
    },
    {
      "parameters": {
        "jsCode": "// Parse and validate workflow JSON\nconst metadata = $input.item.json;\nlet workflowData;\n\ntry {\n  // The response might be string or already parsed\n  workflowData = typeof metadata === 'string' ? JSON.parse(metadata) : metadata;\n} catch (error) {\n  console.error(`Failed to parse workflow ${metadata.fileName}:`, error.message);\n  return {\n    json: {\n      ...metadata,\n      status: 'error',\n      error: 'Invalid JSON format',\n      workflow_data: null\n    }\n  };\n}\n\n// Validate n8n workflow structure\nconst requiredFields = ['name', 'nodes'];\nconst missingFields = requiredFields.filter(field => !workflowData[field]);\n\nif (missingFields.length > 0) {\n  return {\n    json: {\n      ...metadata,\n      status: 'error',\n      error: `Missing required fields: ${missingFields.join(', ')}`,\n      workflow_data: null\n    }\n  };\n}\n\n// Enrich workflow with metadata\nworkflowData.tags = workflowData.tags || [];\n\n// Add folder structure as tags\nif (metadata.tags && metadata.tags.length > 0) {\n  metadata.tags.forEach(tag => {\n    if (!workflowData.tags.find(t => t.name === tag)) {\n      workflowData.tags.push({ name: tag });\n    }\n  });\n}\n\n// Add sync metadata tag\nif (!workflowData.tags.find(t => t.name === 'github-sync')) {\n  workflowData.tags.push({ name: 'github-sync' });\n}\n\n// Add repository tag\nconst repoTag = `repo:${metadata.repository.replace('/', '-')}`;\nif (!workflowData.tags.find(t => t.name === repoTag)) {\n  workflowData.tags.push({ name: repoTag });\n}\n\n// Update workflow name to include folder path if not already\nif (metadata.folderPath && !workflowData.name.includes('/')) {\n  const folderName = metadata.folderPath.split('/').pop();\n  if (folderName && folderName !== metadata.workflowName) {\n    workflowData.name = `${folderName}/${workflowData.name}`;\n  }\n}\n\n// Add settings metadata\nworkflowData.settings = workflowData.settings || {};\nworkflowData.settings.executionOrder = workflowData.settings.executionOrder || 'v1';\n\nreturn {\n  json: {\n    ...metadata,\n    workflow_data: workflowData,\n    status: 'valid',\n    node_count: workflowData.nodes.length,\n    connection_count: Object.keys(workflowData.connections || {}).length\n  }\n};"
      },
      "id": "validate-workflow",
      "name": "Validate & Enrich Workflow",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300],
      "notes": "Validates JSON and adds tags/metadata"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "valid-workflow",
              "leftValue": "={{ $json.status }}",
              "rightValue": "valid",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "not-dry-run",
              "leftValue": "={{ $json.dry_run }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-valid",
      "name": "Check Valid & Not Dry Run",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1560, 300],
      "notes": "Routes valid workflows to import"
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "GET",
        "url": "={{ $json.n8n_base_url }}/api/v1/workflows",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-N8N-API-KEY",
              "value": "={{ $json.n8n_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "filter",
              "value": "={{ JSON.stringify({ name: $json.workflow_data.name }) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "check-existing",
      "name": "Check Existing Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1780, 200],
      "notes": "Checks if workflow already exists in n8n"
    },
    {
      "parameters": {
        "jsCode": "// Determine if we need to create or update\nconst metadata = $input.item.json;\nconst existingWorkflows = metadata.data || [];\n\nif (existingWorkflows.length > 0) {\n  // Workflow exists - prepare for update\n  const existing = existingWorkflows[0];\n  \n  return {\n    json: {\n      ...metadata,\n      existing_id: existing.id,\n      action: 'update',\n      existing_workflow: existing\n    }\n  };\n} else {\n  // Workflow doesn't exist - prepare for create\n  return {\n    json: {\n      ...metadata,\n      action: 'create'\n    }\n  };\n}"
      },
      "id": "determine-action",
      "name": "Determine Create or Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 200],
      "notes": "Decides whether to create new or update existing"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "is-create",
              "leftValue": "={{ $json.action }}",
              "rightValue": "create",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "route-action",
      "name": "Route: Create or Update",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2220, 200],
      "notes": "Routes to create or update endpoint"
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "POST",
        "url": "={{ $json.n8n_base_url }}/api/v1/workflows",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-N8N-API-KEY",
              "value": "={{ $json.n8n_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.workflow_data) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "create-workflow",
      "name": "Create New Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2440, 100],
      "notes": "Creates new workflow in n8n"
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "PATCH",
        "url": "={{ $json.n8n_base_url }}/api/v1/workflows/{{ $json.existing_id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-N8N-API-KEY",
              "value": "={{ $json.n8n_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.workflow_data) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "update-workflow",
      "name": "Update Existing Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2440, 300],
      "notes": "Updates existing workflow in n8n"
    },
    {
      "parameters": {
        "jsCode": "// Collect results from create/update operations\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const result = {\n    file: item.json.path || item.json.fileName,\n    workflow_name: item.json.workflow_data?.name || item.json.workflowName,\n    action: item.json.action,\n    status: 'success',\n    n8n_id: item.json.id,\n    node_count: item.json.node_count,\n    tags: item.json.workflow_data?.tags?.map(t => t.name) || [],\n    timestamp: new Date().toISOString()\n  };\n  \n  results.push(result);\n}\n\nreturn results.map(r => ({ json: r }));"
      },
      "id": "collect-success",
      "name": "Collect Success Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2660, 200],
      "notes": "Aggregates successful operations"
    },
    {
      "parameters": {
        "jsCode": "// Handle errors for invalid or failed workflows\nconst item = $input.item.json;\n\nreturn {\n  json: {\n    file: item.path || item.fileName,\n    workflow_name: item.workflowName,\n    action: 'error',\n    status: 'failed',\n    error: item.error || 'Unknown error',\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "collect-errors",
      "name": "Collect Error Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 450],
      "notes": "Handles failed workflows"
    },
    {
      "parameters": {},
      "id": "merge-results",
      "name": "Merge All Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [2880, 300],
      "notes": "Combines success and error results"
    },
    {
      "parameters": {
        "jsCode": "// Generate comprehensive sync report\nconst items = $input.all();\n\nconst successful = items.filter(i => i.json.status === 'success');\nconst failed = items.filter(i => i.json.status === 'failed');\n\nconst report = {\n  summary: {\n    total: items.length,\n    successful: successful.length,\n    failed: failed.length,\n    timestamp: new Date().toISOString(),\n    repository: items[0]?.json.repository || 'unknown',\n    branch: items[0]?.json.branch || 'unknown',\n    commit_sha: items[0]?.json.commit_sha || 'unknown'\n  },\n  \n  successful_workflows: successful.map(i => ({\n    file: i.json.file,\n    workflow_name: i.json.workflow_name,\n    action: i.json.action,\n    n8n_id: i.json.n8n_id,\n    node_count: i.json.node_count,\n    tags: i.json.tags\n  })),\n  \n  failed_workflows: failed.map(i => ({\n    file: i.json.file,\n    workflow_name: i.json.workflow_name,\n    error: i.json.error\n  })),\n  \n  statistics: {\n    total_nodes: successful.reduce((sum, i) => sum + (i.json.node_count || 0), 0),\n    unique_tags: [...new Set(successful.flatMap(i => i.json.tags || []))],\n    actions: {\n      created: successful.filter(i => i.json.action === 'create').length,\n      updated: successful.filter(i => i.json.action === 'update').length\n    }\n  }\n};\n\nconsole.log('Sync Report:', JSON.stringify(report, null, 2));\n\nreturn { json: report };"
      },
      "id": "generate-report",
      "name": "Generate Sync Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3100, 300],
      "notes": "Creates detailed sync report"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json, null, 2) }}",
        "options": {
          "responseCode": "={{ $json.failed_workflows && $json.failed_workflows.length > 0 ? 207 : 200 }}"
        }
      },
      "id": "webhook-response",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [3320, 300],
      "notes": "Returns sync report to GitHub Actions"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "log-entry",
              "name": "log",
              "value": "={{ JSON.stringify({\n  level: 'info',\n  message: 'Workflow sync completed',\n  report: $json,\n  timestamp: new Date().toISOString()\n}, null, 2) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "log-sync",
      "name": "Log to Console",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [3100, 480],
      "notes": "Logs sync results"
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Parse Webhook Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Webhook Data": {
      "main": [
        [
          {
            "node": "Get Repository Tree",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Repository Tree": {
      "main": [
        [
          {
            "node": "Filter Workflow Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Workflow Files": {
      "main": [
        [
          {
            "node": "Fetch Workflow Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Workflow Content": {
      "main": [
        [
          {
            "node": "Validate & Enrich Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate & Enrich Workflow": {
      "main": [
        [
          {
            "node": "Check Valid & Not Dry Run",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Valid & Not Dry Run": {
      "main": [
        [
          {
            "node": "Check Existing Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Collect Error Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Existing Workflow": {
      "main": [
        [
          {
            "node": "Determine Create or Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Determine Create or Update": {
      "main": [
        [
          {
            "node": "Route: Create or Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route: Create or Update": {
      "main": [
        [
          {
            "node": "Create New Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Existing Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create New Workflow": {
      "main": [
        [
          {
            "node": "Collect Success Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Existing Workflow": {
      "main": [
        [
          {
            "node": "Collect Success Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect Success Results": {
      "main": [
        [
          {
            "node": "Merge All Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect Error Results": {
      "main": [
        [
          {
            "node": "Merge All Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge All Results": {
      "main": [
        [
          {
            "node": "Generate Sync Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Sync Report": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log to Console",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": ""
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-01-01T00:00:00.000Z",
      "updatedAt": "2025-01-01T00:00:00.000Z",
      "id": "1",
      "name": "github-integration"
    },
    {
      "createdAt": "2025-01-01T00:00:00.000Z",
      "updatedAt": "2025-01-01T00:00:00.000Z",
      "id": "2",
      "name": "workflow-sync"
    },
    {
      "createdAt": "2025-01-01T00:00:00.000Z",
      "updatedAt": "2025-01-01T00:00:00.000Z",
      "id": "3",
      "name": "automation"
    }
  ],
  "meta": {
    "instanceId": "github-n8n-sync"
  },
  "id": "github-n8n-sync-001",
  "versionId": "1.0.0"
}
