{
  "name": "NetBox_Create_Device",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "schema": [
            {
              "name": "device_name",
              "type": "string",
              "displayName": "Device Name",
              "required": true,
              "description": "Name of the device to create"
            },
            {
              "name": "device_type",
              "type": "number",
              "displayName": "Device Type ID",
              "required": true,
              "description": "Device type ID"
            },
            {
              "name": "site",
              "type": "number",
              "displayName": "Site ID",
              "required": true,
              "description": "Site ID where device will be located"
            },
            {
              "name": "device_role",
              "type": "number",
              "displayName": "Device Role ID",
              "required": true,
              "description": "Device role ID (e.g., router, switch, firewall)"
            },
            {
              "name": "status",
              "type": "string",
              "displayName": "Status",
              "required": false,
              "description": "Device status (active, planned, staged, etc.) - defaults to active"
            }
          ]
        }
      },
      "id": "trigger-create-device",
      "typeVersion": 1.1,
      "name": "When_Called_From_Another_Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        240,
        340
      ]
    },
    {
      "parameters": {
        "url": "=http://172.27.0.1:8443/api/dcim/devices/?name={{ encodeURIComponent($json.device_name) }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "id": "check-device-exists",
      "name": "Check_Device_Exists",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        460,
        340
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "zUcs6TpKWgVP6mF0",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "device-count-check",
              "leftValue": "={{ $json.count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        340
      ],
      "id": "if-device-not-exists",
      "name": "If_Device_Not_Exists"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://172.27.0.1:8443/api/dcim/devices/",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"name\": \"{{ $('When_Called_From_Another_Workflow').item.json.device_name }}\",\n  \"device_type\": {{ $('When_Called_From_Another_Workflow').item.json.device_type }},\n  \"site\": {{ $('When_Called_From_Another_Workflow').item.json.site }},\n  \"device_role\": {{ $('When_Called_From_Another_Workflow').item.json.device_role }},\n  \"status\": \"{{ $('When_Called_From_Another_Workflow').item.json.status || 'active' }}\"\n}",
        "options": {}
      },
      "id": "create-device",
      "name": "Create_Device",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        900,
        240
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "zUcs6TpKWgVP6mF0",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return {\n  success: true,\n  action: 'created',\n  device: $input.item.json\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        240
      ],
      "id": "format-success-response",
      "name": "Format_Success_Response"
    },
    {
      "parameters": {
        "jsCode": "return {\n  success: false,\n  action: 'already_exists',\n  message: `Device '${$('When_Called_From_Another_Workflow').item.json.device_name}' already exists`,\n  existing_device: $input.item.json.results[0]\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        440
      ],
      "id": "format-exists-response",
      "name": "Format_Already_Exists_Response"
    }
  ],
  "pinData": {},
  "connections": {
    "When_Called_From_Another_Workflow": {
      "main": [
        [
          {
            "node": "Check_Device_Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check_Device_Exists": {
      "main": [
        [
          {
            "node": "If_Device_Not_Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If_Device_Not_Exists": {
      "main": [
        [
          {
            "node": "Create_Device",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format_Already_Exists_Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create_Device": {
      "main": [
        [
          {
            "node": "Format_Success_Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "netbox-create-device-v1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "33e6ca7ddf2f77d2ef98800e4412f09f960dcc9053dea5ab0e0a442e71828fa9"
  },
  "id": "netbox-create-device",
  "tags": []
}
