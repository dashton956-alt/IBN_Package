---
# Gluware/Glueware-focused workflows extracted from api_glueware_examples.yaml
version: '2.0'

gluware.poe_bulk_management:
  description: "Bulk PoE management across multiple devices using WingPy glueware service"
  input:
    - device_list
    - operation  # enable, disable, bounce
    - port_range
    - platform: "meraki"
  tasks:
    init_workflow:
      action: core.noop
      on-success:
        - validate_input

    validate_input:
      action: core.echo
      input:
        message: "Starting bulk {{ operation }} operation on {{ device_list|length }} devices"
      on-success:
        - get_credentials

    get_credentials:
      action: st2.kv.get_object
      input:
        key: "meraki_credentials"
      publish:
        api_credentials: <% task(get_credentials).result %>
      on-success:
        - process_devices

    process_devices:
      with-items: device in <% $.device_list %>
      action: gluware.device_poe_workflow
      input:
        device_serial: <% $.device %>
        operation: <% $.operation %>
        port_range: <% $.port_range %>
        platform: <% $.platform %>
        credentials: <% $.api_credentials %>
      publish:
        device_results: <% task(process_devices).result %>
      on-success:
        - compile_results

    compile_results:
      action: core.local
      input:
        cmd: |
          echo "PoE Operation Results:"
          echo "====================="
          <% $.device_results.each($.get('device_serial', 'Unknown') + ': ' + $.get('status', 'Failed')) %>
      publish:
        final_results: <% task(compile_results).result %>

---

gluware.device_poe_workflow:
  description: "Single device PoE management with fallback services"
  input:
    - device_serial
    - operation
    - port_range
    - platform
    - credentials
  tasks:
    try_wingpy_service:
      action: core.http
      input:
        url: "http://wingpy:8080/poe"
        method: "POST"
        headers:
          Content-Type: "application/json"
        body:
          platform: <% $.platform %>
          operation: <% $.operation %>
          device_identifier: <% $.device_serial %>
          port_id: <% $.port_range[0] %>
          credentials: <% $.credentials %>
        timeout: 30
      publish:
        wingpy_result: <% task(try_wingpy_service).result %>
      on-success:
        - process_wingpy_response
      on-error:
        - try_direct_api

    process_wingpy_response:
      action: core.local
      input:
        cmd: echo "WingPy service successful for device {{ device_serial }}"
      publish:
        service_used: "wingpy"
        operation_result: <% $.wingpy_result %>

    try_direct_api:
      action: gluware.meraki_api
      input:
        action_type: "configure_port"
        serial: <% $.device_serial %>
        port_id: <% $.port_range[0] %>
        port_config: >
          {
            "poeEnabled": <% $.operation = 'enable' %>
          }
      publish:
        direct_api_result: <% task(try_direct_api).result %>
        service_used: "direct_api"
        operation_result: <% $.direct_api_result %>
      on-success:
        - log_fallback_used

    log_fallback_used:
      action: core.local
      input:
        cmd: echo "Fallback to direct API used for device {{ device_serial }}"

---

gluware.network_health_check:
  description: "Call multiple external services to check network health"
  input:
    - organization_id
    - alert_threshold: 5
  tasks:
    check_monitoring_service:
      action: core.http
      input:
        url: "http://monitoring-glueware:3000/api/health-check"
        method: "GET"
        headers:
          Authorization: "Bearer {{ st2kv.system.monitoring_token }}"
          Content-Type: "application/json"
        params:
          org_id: <% $.organization_id %>
          include_devices: true
          include_clients: true
        timeout: 60
      publish:
        monitoring_data: <% task(check_monitoring_service).result.body %>
      on-success:
        - call_meraki_api
      on-error:
        - handle_monitoring_error

    call_meraki_api:
      action: core.http
      input:
        url: "http://wingpy:8080/api"
        method: "POST"
        body:
          method: "GET"
          endpoint: "/organizations/{{ organization_id }}/devices/statuses"
          platform: "meraki"
          credentials:
            api_key: "{{ st2kv.system.meraki_api_key }}"
      publish:
        device_statuses: <% task(call_meraki_api).result.body %>
      on-success:
        - analyze_health_data

    analyze_health_data:
      action: core.local
      input:
        cmd: |
          python3 -c "
          import json
          import sys
          monitoring = json.loads('{{ monitoring_data | jsonify }}')
          devices = json.loads('{{ device_statuses | jsonify }}')
          offline_count = len([d for d in devices if d.get('status') == 'offline'])
          if offline_count >= {{ alert_threshold }}:
              print(f'ALERT: {offline_count} devices offline')
              sys.exit(1)
          else:
              print(f'OK: {len(devices) - offline_count} devices online, {offline_count} offline')
              sys.exit(0)
          "
      publish:
        health_status: <% task(analyze_health_data).result.stdout %>
      on-success:
        - send_health_report
      on-error:
        - create_incident

    send_health_report:
      action: core.http
      input:
        url: "https://your-company.service-now.com/api/now/table/incident"
        method: "POST"
        headers:
          Authorization: "Basic {{ st2kv.system.servicenow_auth }}"
          Content-Type: "application/json"
        body:
          short_description: "Network Health Check - OK"
          description: <% $.health_status %>
          state: 6
          category: "Network"

    create_incident:
      action: core.http
      input:
        url: "https://your-company.service-now.com/api/now/table/incident"
        method: "POST"
        headers:
          Authorization: "Basic {{ st2kv.system.servicenow_auth }}"
          Content-Type: "application/json"
        body:
          short_description: "Network Health Check - CRITICAL"
          description: "Multiple devices offline. Investigation required."
          urgency: 1
          impact: 1
          state: 1
          category: "Network"

    handle_monitoring_error:
      action: core.local
      input:
        cmd: echo "Monitoring service unavailable, using direct API only"
      on-success:
        - call_meraki_api

---

gluware.handle_device_alert:
  description: "Handle device alerts by calling multiple glueware services"
  input:
    - alert_data
  tasks:
    parse_alert:
      action: core.local
      input:
        cmd: |
          echo "Processing alert for device: {{ alert_data.deviceSerial }}"
          echo "Alert type: {{ alert_data.alertType }}"
      publish:
        device_serial: <% $.alert_data.deviceSerial %>
        alert_type: <% $.alert_data.alertType %>
      on-success:
        - determine_action

    determine_action:
      action: core.noop
      on-success:
        - reboot_device: <% $.alert_type = "Device down" %>
        - check_poe_status: <% $.alert_type = "Power anomaly" %>
        - update_monitoring: <% $.alert_type = "Configuration change" %>

    reboot_device:
      action: core.http
      input:
        url: "http://wingpy:8080/api"
        method: "POST"
        body:
          method: "POST"
          endpoint: "/devices/{{ device_serial }}/reboot"
          platform: "meraki"
          credentials:
            api_key: "{{ st2kv.system.meraki_api_key }}"
      on-success:
        - create_reboot_ticket

    check_poe_status:
      action: core.http
      input:
        url: "http://poe-monitor:4000/check-device"
        method: "POST"
        body:
          device_id: <% $.device_serial %>
          full_scan: true
      on-success:
        - analyze_poe_data

    update_monitoring:
      action: core.http
      input:
        url: "http://config-mgmt:5000/device/{{ device_serial }}/sync"
        method: "POST"
        headers:
          X-API-Key: "{{ st2kv.system.config_mgmt_key }}"
      on-success:
        - log_config_sync

    create_reboot_ticket:
      action: core.http
      input:
        url: "http://ticketing-glueware:6000/tickets"
        method: "POST"
        body:
          title: "Device {{ device_serial }} rebooted automatically"
          description: "Device was rebooted due to {{ alert_type }} alert"
          priority: "medium"
          category: "network"

    analyze_poe_data:
      action: core.local
      input:
        cmd: echo "Analyzing PoE data for device {{ device_serial }}"

    log_config_sync:
      action: core.local
      input:
        cmd: echo "Configuration sync completed for {{ device_serial }}"
